"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['app', 'rt', 'create_app', 'index', 'resolve_note_path', 'app_route']

# %% ../nbs/00_core.ipynb 3
from fasthtml.common import *
from monsterui.all import *
from .commons import config, MountPaths
from memexplatform.ui.structure import ifhtmx
from .mdmanager import ObsidianHTMLRenderer, get_obsidianmd_ast, get_subdirs
from mistletoe import Document
import urllib
from .jupyter import render_nb


# %% ../nbs/00_core.ipynb 5
def create_app():
    hdrs = Theme.neutral.headers(highlightjs=True)
    script = Script(src="https://unpkg.com/@superset-ui/embedded-sdk")
    newhdrs = hdrs  + [script]
    mount_routes = []

    app = FastHTML(hdrs=newhdrs, live=True, exts='ws', routes=mount_routes)
    # app.add_middleware(SessionSyncMiddleware)
    rt = app.route
    return app, rt

app, rt = create_app()

# %% ../nbs/00_core.ipynb 8
@rt
def index(request:Request):

    # listteam_comp = Container(Div('Team'), hx_get=f'/portal/list_team', hx_target='#listteam', id='listteam', hx_swap='innerHTML',hx_vals=json.dumps({"folder": str(config.NBPATH)}),  hx_trigger='load')
    comp = Div("Obsidian Companion")
    
    return ifhtmx(request, comp)

# %% ../nbs/00_core.ipynb 11
def resolve_note_path(vault:Path, file:str) -> Path | None:
    search_term = urllib.parse.unquote(file); search_term
    rel_path = Path(search_term); rel_path
    fname = rel_path.name
    fldr = rel_path.parent; fldr
    pfname = None
    extensions = ('.png', '.jpg', '.jpeg', '.gif', '.bmp', '.svg', '.webp', '.tiff', '.ico',
                    '.base', '.canvas', '.md', '.qmd', '.ipynb'
                )
    if fldr.name == "":
        if fname.lower().endswith(extensions):
            for sub in get_subdirs(vault):
                pfname = next(sub.rglob(fname), None)
                if pfname: break
        else:
            mdfname = fname +".md"
            for sub in get_subdirs(vault):
                pfname = next(sub.rglob(mdfname), None)
                if pfname: break
    else:
        if fname.lower().endswith(extensions):
            pfname = next((vault/fldr).rglob(fname), None)
        else:
            mdfname = fname +".md"
            pfname = next((vault/fldr).rglob(mdfname), None)
    if pfname: return pfname
    else: 
        lsfldr = vault/search_term
        if lsfldr.is_dir(): return lsfldr
        else: return None

# %% ../nbs/00_core.ipynb 12
@app.get('/open')
def app_route(request: Request, file: str = ""):
    vault_path = config.OBSIDIAN_VAULT
    file_path = resolve_note_path(vault_path, file)
    if file_path is None: return Div(f"Path not found: {urllib.parse.unquote(file)}")

    # If it's a directory → list contents
    if file_path.is_dir():
        items = []
        for p in sorted(file_path.iterdir()):
            rel_path = p.relative_to(vault_path)
            href = MountPaths.open.to(file=rel_path)
            items.append(Li(A(p.name, href=href)))
        return ifhtmx(request,
            Div(
                f"Listing for {file_path}:",
                Ul(*items)
            )
        )
    # If it's a file → show content (assuming text)
    if file_path.is_file():
        if file_path.name.lower().endswith(".ipynb"):
            return ifhtmx(
                    request,
                    Container(
                        H1(file_path.stem, cls='uk-h1 text-4xl font-bold mt-12 mb-6'),
                        render_nb(file_path)
                ))
        try:
            text = file_path.read_text(encoding="utf-8")
        except Exception:
            text = "[Unable to read file]"

        with ObsidianHTMLRenderer() as renderer:
            doc = get_obsidianmd_ast(text)
            html = renderer.render(doc)

        return ifhtmx(
            request,
            Container(
                H1(file_path.stem, cls='uk-h1 text-4xl font-bold mt-12 mb-6'),
                Card(NotStr(apply_classes(html)))
            )
        )
