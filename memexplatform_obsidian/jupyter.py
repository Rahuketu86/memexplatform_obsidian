"""Jupyter rendering in memexplatform obsidian"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_jupyter.ipynb.

# %% auto 0
__all__ = ['load_notebook', 'extract_cells', 'create_flippable_card', 'render_nb']

# %% ../nbs/06_jupyter.ipynb 3
from .settings import ObsidianConfig
from enum import Enum
import urllib
from fasthtml.common import *
from monsterui.all import *
from fasthtml.jupyter import *
from collections.abc import Callable
import inspect
import ast
import json
from pathlib import Path

# %% ../nbs/06_jupyter.ipynb 4
def load_notebook(path: str):
    with open(path, "r", encoding="utf-8") as f:
        nb = json.load(f)
    return nb

# %% ../nbs/06_jupyter.ipynb 5
def extract_cells(nb):
    cells = []
    for cell in nb.get("cells", []):
        ctype = cell.get("cell_type")
        source = "".join(cell.get("source", []))
        outputs = []
        if ctype == "code":
            # extract outputs already in the notebook
            for out in cell.get("outputs", []):
                # handle different types
                if out.get("output_type") == "stream":
                    outputs.append({"type": "stream", "text": "".join(out.get("text", []))})
                elif out.get("output_type") == "execute_result":
                    data = out.get("data", {})
                    # text/plain may be present
                    text = data.get("text/plain", "")
                    outputs.append({"type": "execute_result", "text": text})
                elif out.get("output_type") == "error":
                    tb = out.get("traceback", [])
                    outputs.append({"type": "error", "text": "\n".join(tb)})
        cells.append({"cell_type": ctype, "source": source, "outputs": outputs})
    return cells

# %% ../nbs/06_jupyter.ipynb 6
_counter = 0
def _gen_id(prefix="f"):
    global _counter
    _counter += 1
    return f"{prefix}{_counter}"

def create_flippable_card(content, source_code, outputs=None, extra_cls=None):
    """
    Create a card that shows `content` (front), `source_code` toggled on "See Source",
    and optionally `outputs` toggled on "See Output".
    """
    uid = _gen_id("card")

    # Button to toggle source code
    btn_source = Button(
        "See Source",
        cls=ButtonT.primary,
        **{"data_uk_toggle": f"target: #{uid}-source"}
    )
    # Hidden Div for source
    source_div = Div(
        Pre(Code(source_code, classes="hljs language-python")),
        id=f"{uid}-source",
        hidden=True,
        cls="mt-2 p-2 bg-gray-100 rounded"
    )

    children = [btn_source, content, source_div]

    if outputs:
        btn_outputs = Button(
            "See Output",
            cls=ButtonT.secondary,
            **{"data_uk_toggle": f"target: #{uid}-output"}
        )
        output_div = Div(
            *[Pre(o) for o in outputs],
            id=f"{uid}-output",
            hidden=True,
            cls="mt-2 p-2 bg-gray-100 rounded text-gray-800"
        )
        children.insert(1, btn_outputs)  # place output button before content maybe
        children.append(output_div)

    card = Card(*children, cls=("my-6 " + extra_cls) if extra_cls else "my-6")
    return card

# %% ../nbs/06_jupyter.ipynb 8
def render_nb(nb_path: str):
    nb = load_notebook(nb_path)
    cells = extract_cells(nb)
    blocks = []
    for cell in cells:
        if cell["cell_type"] == "markdown":
            if cell["source"].strip():
                md_html = render_md(cell["source"])
                blocks.append(Card(
                    Safe(md_html),
                    cls="my-4 shadow"
                ))
        elif cell["cell_type"] == "code":
            if cell["source"].strip():
                # content: show code front
                content = Pre(Code(cell["source"], classes="hljs language-python"))
                # prepare outputs list of plain strings
                outs = [o["text"] for o in cell.get("outputs", []) if o.get("text")]
                blocks.append(
                    create_flippable_card(
                        content=content,
                        source_code=cell["source"],
                        outputs=outs,           # now allowed
                        extra_cls="border border-gray-300"
                    )
                )
    return Container(*blocks, cls="p-6 space-y-6")
