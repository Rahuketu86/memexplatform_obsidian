"""Obsidian App Summary Dashboard"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/09a_home.summary.ipynb.

# %% auto 0
__all__ = ['get_df', 'chart_tags', 'InfoCard', 'get_infocard', 'chart_timeseries']

# %% ../../nbs/09a_home.summary.ipynb 2
from fasthtml.common import *
from monsterui.all import *
from ..datastore import FileStore, NoteStore, DBStore, iter_files
from ..commons import config, ExtensionTypes
import pandas as pd

# %% ../../nbs/09a_home.summary.ipynb 4
def get_df(config, fldrs = ['pages', 'journals'], extensions = ExtensionTypes.TEXTLIKE_EXTS):
    store =  DBStore(config) if config.ENABLE_DB_MODE else FileStore(config)
    flds = ",".join(f"'{e}'" for e in fldrs)
    exts = ",".join(f"'{e.lstrip('.')}'"for e in  extensions); exts
    a = list(store.db.query(f"""
        select title, url, created_time, modified_time from node 
        where is_folder=0 
        and parent in ({flds})
        and ext in ({exts})
        """)); a
    # ); a

    if a:
        df = pd.DataFrame.from_records(a); df
        df['created_time'] = pd.to_datetime(df['created_time'],  unit='s', utc=True).dt.date
        df['modified_time'] = pd.to_datetime(df['modified_time'], unit='s', utc=True).dt.date
        return df
    else:
        return None

# %% ../../nbs/09a_home.summary.ipynb 6
def chart_tags():
    store =  DBStore(config) if config.ENABLE_DB_MODE else FileStore(config)
    query = f"""
    select distinct n.title, n.url, p.value as tag
    from node n
    join properties p on n.lockey = p.lockey
    where p.type = 'TagLink'
    and n.parent in ('pages', 'journals', 'Clippings')
    """
    a = list(store.db.query(query)); a
    df = pd.DataFrame.from_records(a); df
    # df.groupby('tag')['title'].count().sort_values(ascending=False)
    # Aggregate counts
    tag_counts = (
        df.groupby("tag")["title"]
        .count()
        .sort_values(ascending=False)
    )

    series_data = tag_counts.values.tolist()
    categories = tag_counts.index.tolist()

    return ApexChart(
        opts={
            "series": [
                {"name": "Notes", "data": series_data}
            ],
            "chart": {
                "type": "bar",
                "height": 400
            },
            "plotOptions": {
                "bar": {
                    "borderRadius": 4,
                    "horizontal": True
                }
            },
            "dataLabels": {"enabled": False},
            "xaxis": {
                "categories": categories,
                "title": {"text": "Count"}
            },
            "yaxis": {
                "title": {"text": "Tag"}
            },
            "legend": {"show": False}
        },
        cls="max-w-3xl max-h-lg"
    )

# %% ../../nbs/09a_home.summary.ipynb 9
def InfoCard(title, value, change): 
    return Card(H3(value), footer=P(change, cls=TextPresets.muted_sm), header = H4(title))

# %% ../../nbs/09a_home.summary.ipynb 11
def get_infocard(df, header='Notes'):
    if df is not None:
        count = df.count()['title']
        s = df.groupby('created_time')['title'].count()
        m = f"+{s[s.index.max()]} last on  {s.index.max()}";m
    else:
        count = 0
        s = 0
        m = "No additional info"
    return InfoCard(header, count, m)

# %% ../../nbs/09a_home.summary.ipynb 12
def chart_timeseries(df):
    # Convert dataframe into Apex format
    df_created = df.groupby('created_time')['title'].count()
    df_modified = df.groupby('modified_time')['title'].count()
    created_series = [
        {"x": d.strftime("%Y-%m-%d"), "y": int(v)}
        for d, v in df_created.items()
    ]; created_series


    modified_series = [
        {"x": d.strftime("%Y-%m-%d"), "y": int(v)}
        for d, v in df_modified.items()
    ]; modified_series

    return ApexChart(
        opts={
            "chart": {
                "type": "line",
                "zoom": {"enabled": True},
                "toolbar": {"show": True}
            },
            "stroke": {"curve": "smooth"},
            "series": [
                {"name": "Created",  "data": created_series},
                {"name": "Modified", "data": modified_series}
            ],
            "xaxis": {
                "type": "datetime",
                "title": {"text": "Date"}
            },
            "yaxis": {
                "title": {"text": "Count"}
            },
            "markers": {"size": 4},
            "tooltip": {"shared": True, "intersect": False},
            "legend": {"position": "top"}
        },
        cls="max-w-3xl max-h-lg"
    )
